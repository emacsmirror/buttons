#+OPTIONS: toc:nil
#+OPTIONS: ^:nil
#+OPTIONS: num:nil
#+TITLE: EMACS-BUTTONS

#+BEGIN_CENTER
“The power of emacs lisp at your fingertips”
#+END_CENTER

#+ATTR_HTML: :width 400
[[file:doc/img/emacs-buttons.png]]


* Description

~emacs-buttons~ is an emacs lisp framework that provides a declarative,
concise way to build, install, and visualize custom, deeply nested
keymaps of commands and frequently-occurring code templates.


* Features
  - Inheritance
    - Supports defining keymaps for a given mode by building on top of an existing keymap
  - Auto-loading
    - emacs-buttons handles auto-installing bindings to given keymap symbols that may be unbound
      now and become bound in the future
  - code templates
    - Provides a simple but flexible template macro for defining code templates (also known as snippets
      or keyboard macros)
  - Visualization
* Overview
** ~defbuttons(VAR ANCESTOR LOAD-AFTER-KEYMAPS KEYMAP)~
   defvar-like wrapper that defines keymap ~KEYMAP~ as ~VAR~.

   - ~defbuttons~ supports specifying an ~ANCESTOR~ keymap as a base from which to inhertit common bindings.

   - It also handles auto-installing the newly-defined bindings into specific mode maps (~LOAD-AFTER-KEYMAPS~) after they are loaded into emacs.

   The following example defines a keymap ~c++buttons~
   using a previously-defined ~c-buttons~ as a base. The ~c++-buttons~
   keymap bindings in are automatically installed to ~c++-mode-map~
   whenever that symbol is loaded in emacs.

   #+BEGIN_SRC emacs-lisp
   (defbuttons c++-buttons c-buttons
      (c++-mode-map)
      ; these macros introduced later...
      ;(but
      ; ("f"
      ;  (but
      ;   ("a" (cmd (ins "for(auto& {}: {}){(insert-code-block)}")))
      ;   ("f" (cmd (ins "for ( int {0} = 0; {0} < {}; {0}++ ){(cbd)}")))
      ;   ...)))
      (let ((kmap (make-sparse-keymap)))
               (define-key kmap (kbd "s-c") (lambda () (interactive) (message "hello world c++!")))
               kmap))
   #+END_SRC
   The following example creates a keymap ~emacs-lisp-buttons~ on top of the base
   keymap ~programming-buttons~.

   #+BEGIN_SRC emacs-lisp
   (defbuttons emacs-lisp-buttons programming-buttons
      (emacs-lisp-mode-map read-expression-map inferior-emacs-lisp-mode-map)
      ...)
   #+END_SRC
   It is installed to the keymaps
     : (emacs-lisp-mode-map read-expression-map inferior-emacs-lisp-mode-map)
   as they become available.
   - Unlike ~(set-keymap-parent ...)~, installation of keymaps does recursive merging, with the
     child's keymap bindings taking precedence over its ~ANCESTOR~. In the future it may be
     possible to specify multiple ancestors.

** ~buttons-make(&rest KEY-TARGET-PAIRS)~ (aka *but*)
   creates a sparse keymap of bindings specified as ~(KEY TARGET)~ pairs.
   - ~KEY~ is a key-binding
   - ~TARGET~ may be any define-key ~DEF~ target, including a command,
     a plain string, a nested ~buttons-make~ form, etc
     #+BEGIN_SRC emacs-lisp
     (but
     ...
         ((kbd "s-E") 'eval-defun)
         ((kbd "s-i") "(interactive)")
         ((kbd "s-7")
          (but
           ((kbd "s-r") "&rest ")
           ((kbd "s-k") "&key ")
           ((kbd "s-b") "&body ")
           ((kbd "s-o") "&optional ")))
         ...)
     #+END_SRC
   - after binding ~*buttons-make-key-mapper*~ to a function that adds a super modifier,
     the above form is equivalent to:

    #+BEGIN_SRC emacs-lisp
    (let-when-compile
        ((*buttons-make-key-mapper* 'modifier-add-super))
        (but
         ...
         ("E" 'eval-defun)
         ("i" "(interactive)")
         ("7"
          (but
           ("r" "&rest ")
           ("k" "&key ")
           ("b" "&body ")
           ("o" "&optional ")))
         ...))
     #+END_SRC

** ~buttons-insert-rec-template~ (aka *ins*)
    A macro to define a code template.

    It it roughly inspired by python's
    : "To {0} or not to {0}, that is the {}".format(...)
    syntax as a way to refer to a template variable several times. It does
    interpretation of the following directives within ~{...}~ braces:

    - An empty ~{}~ enters a recurisve edit for the user to enter custom text,
      for example a template variable.
    - ~{N}~ where ~N~ is a number, is similar to ~{}~ but also records text entered by
      the user into the label ~N~ the first time it is encountered, so that
      it may be referenced as a variable later in the template
    - Any other content within the ~{...}~ directive regexp is interpreted
      as a lisp expression. If the expression evaluates to a string, it is inserted.

    - Example macroexpansion of a typical for-loop:
    #+BEGIN_SRC emacs-lisp
    (macroexpand ' (buttons-insert-rec-template
                      "for ( int {0} = 0; {0} < {}; {0}++ ){(insert-code-block)}"))

    ;; expands to:

    (let
            (rec-capture-0--1350)
        (insert "for ( int ")
        (setf rec-capture-0--1350
                    (let
                            ((old-point1349
                                (point)))
                        (recursive-edit)
                        (buffer-substring-no-properties old-point1349
                                                                                        (point))))
        (insert " = 0; ")
        (insert rec-capture-0--1350)
        (insert " < ")
        (recursive-edit)
        (insert "; ")
        (insert rec-capture-0--1350)
        (insert "++ )")
        (let*
                ((expr-val1351
                    (insert-code-block)))
            (when
                    (stringp expr-val1351)
                (insert expr-val1351))))
    #+END_SRC
  - It is possible to change the directive regexp from matching ~{...}~
    to something else, like ~<...>~, by binding
    ~BUTTONS-INSERT-REC-TEMPLATE-DIRECTIVE-REGEXP~ at compile-time
     through ~let-when-compile~:

     #+BEGIN_SRC emacs-lisp
     ("H" (cmd
               (let-when-compile
                   ((buttons-insert-rec-template-directive-regexp "<\\(.*\\)>"))
                 (ins "<(upcase-last)>=${1} && shift")
                 (ins "<(newline-and-indent)>"))))
     #+END_SRC

** ~buttons-defcmd (&rest BODY)~ (aka *cmd*)
   A convenience macro for defining an autodocumented, not-anonymous (but auto-named) 0-ary
   command. This is mainly to make frequent use of
   #+BEGIN_SRC emacs-lisp
   (lambda () (interactive) "documentation"...)
   #+END_SRC
   look more concise and provide automatic documentation:

   #+BEGIN_SRC emacs-lisp
   > (buttons-defcmd (message "hello world") (insert "goodbye"))
   > autogen-cmd5457
   > (describe-function 'autogen-cmd5457)
   > ...
   #+END_SRC
   - ~BODY~ is an implicit PROGN
   - It also (WIP) defines an undo-boundary and handling of a custom tag
     to make it easy to cancel the currently executing command atomically
** ~buttons-macrolet (MORE-MACROLET-DEFS &rest BODY)~
   Provides 3-letter aliases to frequently used functions and macros to
   make ~defbuttons~ forms more concise. Within a ~buttons-macrolet~ form, these
   are default aliases:
   | *shortcut* | *function/macro*            |
   | but        | buttons-make                |
   | nli        | newline-and-indent          |
   | ins        | buttons-insert-rec-template |
   | cmd        | buttons-defcmd              |
   | cbd        | buttons-insert-code-block   |
   | rec        | recursive-edit              |
   | idt        | indent-for-tab-command      |
* Installing
  wip
* Additional links
  - [[file:doc/motivation.org][Motivation]]
  - [[./doc/buttons/index.html][Auto-generated function/macro index]]
  - [[./doc/buttons-data.el][Full Example]]
