#+TITLE: EMACS-BUTTONS

#+BEGIN_CENTER
“The power of emacs lisp at your fingertips”
#+END_CENTER

#+ATTR_HTML: :width 400
[[file:doc/img/emacs-buttons.png]]


* Description

~emacs-buttons~ is an emacs lisp mini-language to help organize
emacs-lisp commands and frequently-occurring code templates into a tree-like hierarchy
of keymaps, and to facilitate installing and visualizing these keymaps.

* Features
  - Inheritance
    - Supports defining keymaps for a given mode by building on top of an existing keymap recursively.
  - Auto-loading
    - emacs-buttons handles auto-installing newly-defined bindings to well-known
      keymap symbols that may be unbound now and will be loaded in the future,
      avoiding the need to manually write custom hooks.
  - Code templates
    - Provides a simple but flexible template macro for defining code templates (also known as snippets
      or keyboard macros).
  - Visualization
* Quickstart
  - The following ~defbuttons~ form

  #+BEGIN_SRC emacs-lisp
  (buttons-macrolet
   ((nli () `(newline-and-indent)))
   (let-when-compile ((buttons-make-key-mapper 'buttons-modifier-add-super))

     (defbuttons emacs-lisp-buttons nil
       (emacs-lisp-mode-map read-expression-map inferior-emacs-lisp-mode-map)
       (but
        ("a" (cmd (ins "(lambda ({}) {})")))
        ("z" (cmd (ins "(if {})")))
        ("x" (cmd (ins "(when {})")))
        ("c" (cmd (ins "(unless {})")))
        ("v" (cmd (ins "(progn {})")))
        ("d"
         (but
          ("v" (cmd (ins "(defvar {}){(nli)}")))
          ("f" (cmd (ins "(defun {} ({}){(nli)}{})")))
          ("m" (cmd (ins "(defmacro {} ({}){(nli)}{})")))
          ("s" (cmd (ins "(defstruct {}{(nli)}{})")))
          ("b" (cmd (ins "(destructuring-bind ({}){})")))))))))
  #+END_SRC

  is roughly equivalent to

  #+BEGIN_SRC emacs-lisp
  (defvar emacs-lisp-buttons nil "emacs-lisp-buttons buttons map")

  (setq emacs-lisp-buttons
        (let ((kmap434 (make-sparse-keymap)))
          (define-key kmap434 (kbd "s-a") (lambda () (interactive) (insert "(lambda ({}) {})")))
          (define-key kmap434 (kbd "s-z") (lambda () (interactive) (insert "(if {})")))
          (define-key kmap434 (kbd "s-x") (lambda () (interactive) (insert "(when {})")))
          (define-key kmap434 (kbd "s-c") (lambda () (interactive) (insert "(unless {})")))
          (define-key kmap434 (kbd "s-v") (lambda () (interactive) (insert "(progn {})")))
          (define-key kmap434 (kbd "s-d")
            (let
                ((kmap435 (make-sparse-keymap)))
              (define-key kmap435 (kbd "s-?") (lambda () (interactive) (buttons-display kmap435)))
              (define-key kmap435 (kbd "s-v") (lambda () (interactive) (insert "(defvar {}){(nli)}")))
              (define-key kmap435 (kbd "s-f") (lambda () (interactive) (insert "(defun {} ({}){(nli)}{})")))
              (define-key kmap435 (kbd "s-m") (lambda () (interactive) (insert "(defmacro {} ({}){(nli)}{})")))
              (define-key kmap435 (kbd "s-s") (lambda () (interactive) (insert "(defstruct {}{(nli)}{})")))
              (define-key kmap435 (kbd "s-b") (lambda () (interactive) (insert "(destructuring-bind ({}){})")))
              kmap435))
          kmap434))

  (add-hook 'emacs-lisp-mode-hook
            (lambda () (setq emacs-lisp-mode-map
                             (make-composed-keymap
                              emacs-lisp-buttons emacs-lisp-mode-map))))

  (add-hook 'inferior-emacs-lisp-mode-hook
            (lambda () (setq inferior-emacs-lisp-mode-map
                             (make-composed-keymap
                              emacs-lisp-buttons inferior-emacs-lisp-mode-map))))

  (setq read-expression-map
        (make-composed-keymap
         emacs-lisp-buttons read-expression-map))
  #+END_SRC
  With some differences:
   - ~(ins ...)~ is not plain ~insert~ but refers to a code-template-generating macro
      which interprets directives within ~{...}~ brackets
     - other aliases within the scope of ~buttons-macrolet~ are ~(but)~, ~(cmd)~ and ~(nli)~
   - insalling the keymap ~emacs-lisp-buttons~ onto the specified destination keymaps:
     : (emacs-lisp-mode-map read-expression-map inferior-emacs-lisp-mode-map)
     - is not done with ~make-composed-keymap~ but by recursive merging
     - is not done with ~add-hook~ but via ~after-load-functions~

* Installation
  Place ~buttons.el~ somewhere in the load-path and require the feature:

  #+BEGIN_SRC emacs-lisp
  (push "/path/to/buttons/parent/directory" load-path)
  (require 'buttons)
  #+END_SRC

* Overview
** ~defbuttons(KEYMAP-VAR ANCESTOR LOAD-AFTER-KEYMAPS KEYMAP)~
   defvar-like wrapper that defines keymap ~KEYMAP~ as ~KEYMAP-VAR~.

   - ~ANCESTOR~ is a keymap that is to be used as a base from which to inhertit common bindings.
   - ~LOAD-AFTER-KEYMAPS~ spefies a list of keymap symbols onto which to install ~KEYMAP-VAR~
      whenever those symbols become bound after a file load.

   - A note on inheritance
     - Placing ~KEYMAP~ on top of ~ANCESTOR~, as well as placing the newly-defined
       ~KEYMAP-VAR~ on top of each keymap in ~LOAD-AFTER-KEYMAPS~ as they become available,
       is done by recursive merging of keymaps via the internal function
       ~buttons-define-keymap-onto-keymap~, which differs from ~(set-keymap-parent ...)~
       in that nested keymaps (or bindings for prefix keys) are merged instead of
       one definition clobbering the other one.


   The following example defines a keymap ~c++buttons~
   using a previously-defined ~c-buttons~ as a base. The ~c++-buttons~
   keymap bindings are automatically installed to ~c++-mode-map~
   whenever that symbol is loaded in emacs.

   #+BEGIN_SRC emacs-lisp
   (defbuttons c++-buttons c-buttons
      (c++-mode-map)
      (let ((kmap (make-sparse-keymap)))
               (define-key kmap (kbd "s-m") (lambda () (interactive) (insert "#include ")))
               kmap))
   #+END_SRC
** ~buttons-make(&rest KEY-TARGET-PAIRS)~ (aka *but*)
   creates a sparse keymap of bindings specified as ~(KEY TARGET)~ pairs.
   - ~KEY~ is a key-binding
   - ~TARGET~ may be any define-key ~DEF~ target, including a command,
     a plain string, a nested ~buttons-make~ form, etc
     #+BEGIN_SRC emacs-lisp
     (but
     ...
         ((kbd "s-E") 'eval-defun)
         ((kbd "s-i") "(interactive)")
         ((kbd "s-7")
          (but
           ((kbd "s-r") "&rest ")
           ((kbd "s-k") "&key ")
           ((kbd "s-b") "&body ")
           ((kbd "s-o") "&optional ")))
         ...)
     #+END_SRC
   - if the variable ~buttons-make-key-mapper~ is bound to a function that adds a super modifier,
     the above form is equivalent to:

    #+BEGIN_SRC emacs-lisp
    (let-when-compile
        ((buttons-make-key-mapper 'modifier-add-super))
        (but
         ...
         ("E" 'eval-defun)
         ("i" "(interactive)")
         ("7"
          (but
           ("r" "&rest ")
           ("k" "&key ")
           ("b" "&body ")
           ("o" "&optional ")))
         ...))
     #+END_SRC

** ~buttons-template-insert~ (aka *ins*)
    A macro to define a code template.

    It it roughly inspired by python's
    : "To {0} or not to {0}, that is the {}".format(...)
    syntax as a way to refer to a template variable several times. It does
    interpretation of the following directives within ~{...}~ braces:

    - An empty ~{}~ enters a recurisve edit for the user to enter custom text,
      for example a template variable.
    - ~{N}~ where ~N~ is a number, is similar to ~{}~ but also records text entered by
      the user into the label ~N~ the first time it is encountered, so that
      it may be referenced as a variable later in the template
    - Any other content within the ~{...}~ directive regexp is interpreted
      as a lisp expression. If the expression evaluates to a string, it is inserted.

    - Example macroexpansion of a typical for-loop:
    #+BEGIN_SRC emacs-lisp
    (macroexpand ' (buttons-template-insert
                      "for ( int {0} = 0; {0} < {}; {0}++ ){(insert-code-block)}"))

    ;; expands to:

    (let (rec-capture-0--1350)
      (insert "for ( int ")
      (setf rec-capture-0--1350
            (let ((old-point1349 (point)))
              (recursive-edit)
              (buffer-substring-no-properties old-point1349 (point))))
      (insert " = 0; ")
      (insert rec-capture-0--1350)
      (insert " < ")
      (recursive-edit)
      (insert "; ")
      (insert rec-capture-0--1350)
      (insert "++ )")
      (let* ((expr-val1351 (insert-code-block)))
        (when (stringp expr-val1351)
          (insert expr-val1351))))
    #+END_SRC
  - It is possible to change the directive regexp from matching ~{...}~
    to something else, like ~<...>~, by binding
    ~BUTTONS-TEMPLATE-INSERT-DIRECTIVE-REGEXP~ at compile-time
     through ~let-when-compile~:

     #+BEGIN_SRC emacs-lisp
     (let-when-compile
                ((buttons-template-insert-directive-regexp "<\\(.*?\\)>"))
                ;; insert a bash variable surrounded by double quotes
              (buttons-template-insert "\"${<>}\""))
     #+END_SRC

** ~buttons-defcmd (&rest BODY)~ (aka *cmd*)
   A convenience macro for defining an autodocumented, not-anonymous (but auto-named) 0-ary
   command. This is mainly to make frequent use of
   #+BEGIN_SRC emacs-lisp
   (lambda () (interactive) "documentation"...)
   #+END_SRC
   look more concise and provide automatic documentation:

   #+BEGIN_SRC emacs-lisp
   > (buttons-defcmd (message "hello world") (insert "goodbye"))
   > autogen-cmd5457
   > (describe-function 'autogen-cmd5457)
   > ...
   #+END_SRC
   - ~BODY~ is an implicit PROGN
   - It also defines a tag that may be thrown to atomically abort the
     currently executing command. The command ~buttons-abort-cmd~ throws this tag.
** ~buttons-macrolet (MORE-MACROLET-DEFS &rest BODY)~
   Provides 3-letter aliases to frequently used functions and macros to
   make ~defbuttons~ forms more concise. Within a ~buttons-macrolet~ form, these
   are default aliases:
   | *shortcut* | *function/macro*                                 |
   | but        | buttons-make                                     |
   | cmd        | buttons-defcmd                                   |
   | ins        | buttons-template-insert                          |
   | nli        | newline-and-indent                               |
   | cbd        | (anonymous macro to insert a c-style code block) |
   | rec        | recursive-edit                                   |
   | idt        | indent-for-tab-command                           |
* Additional links
  - [[file:doc/motivation.org][Motivation and Benefits]]
  - [[./doc/buttons/index.html][Auto-generated function/macro index]]
  - [[./doc/buttons-data.el][Full Example]]
